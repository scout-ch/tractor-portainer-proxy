tls:
  options:
    default:
      minVersion: VersionTLS12
      cipherSuites:
        # See https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#23-use-secure-cipher-suites
        # and https://www.acunetix.com/blog/articles/tls-ssl-cipher-hardening/

        # TLS 1.3 cipher suites.
        - "TLS_AES_256_GCM_SHA384"
        - "TLS_CHACHA20_POLY1305_SHA256"
        - "TLS_AES_128_GCM_SHA256"
        # TLS 1.2
        - "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
        - "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
        - "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305"
        - "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305"
        # Apparently unsupported in traefik
        # - "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384"
        # - "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384"
        - "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
        - "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
        - "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256"
        # Considered weak by ssllabs
        # - "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
        # TLS_FALLBACK_SCSV isn't a standard cipher suite but an indicator that the client is doing version fallback. See RFC 7507.
        - "TLS_FALLBACK_SCSV"
      curvePreferences:
        - X25519
        - CurveP256
        - CurveP384

http:
  serversTransports:
    insecure:
      insecureSkipVerify: true
